package com.pragmindz.hessian.serializer.helper;
/*
    Hessian4J - Java Hessian Library
    Copyright (C) 2008 PragMindZ
    http://www.pragmindz.com
    mailto://???

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
*/
import com.pragmindz.hessian.model.*;
import com.pragmindz.hessian.serializer.HessianSerializer;
import com.pragmindz.hessian.serializer.HessianSerializerException;

import java.util.Map;
import java.util.Iterator;

/**
 * A generic helper template, it allows quick implementation of helpers which generate classdefs and objects
 * based on an object representation.
 * Objects generated by this generator are stored in the pool, so recursive structures
 * can be handled.
 */
public abstract class GenObjectHelper
implements HessianHelper
{
    private Class helpedclass;
    private String helpername;
    private String[] fieldNames;
    private Class[] fieldTypes;
    private Object[] args;
    private HessianClassdef classdef;

    protected GenObjectHelper(Class helpedclass, String helpername, String[] fieldNames, Class[] fieldTypes)
    {
        this.helpedclass = helpedclass;
        this.helpername = helpername;
        this.fieldNames = fieldNames;
        this.fieldTypes = fieldTypes;
        this.classdef = new HessianClassdef(helpedclass.getName(), fieldNames);
        args = new Object[fieldNames.length];
    }

    public Object deserialize(HessianValue aValue, HessianSerializer aEngine, Map<HessianValue, Object> aPool)
    throws HessianSerializerException
    {
        if(!(aValue instanceof HessianObject)) throw new HessianSerializerException(String.format("%1$s error while deserializing. Expected a HessianObject but received: '%2$s'.", helpername, aValue.getClass().getName()));
        final HessianObject lObj = (HessianObject) aValue;

        // Check field name consistency. Is the class we received consistent with the current helped class.
        final HessianClassdef lDef = lObj.getHessianClassdef();
        final Iterator<HessianString> lNameIter = lDef.iterator();
        int j = 0;
        while (lNameIter.hasNext())
        {
            final HessianString lDefFieldName =  lNameIter.next();
            if(!fieldNames[j].equals(lDefFieldName.getValue()))
            {
                throw new HessianSerializerException(String.format("%1$s error while deserializing. Noticed field naming problem. Field index: '%2$d' was expected to have name: '%3$s' but was named: '%4$s'.", helpername, j, fieldNames[j],lDefFieldName.getValue() ));
            }
            j++;
        }

        // Copy the field values, check the types.
        if (lObj.size() != args.length) throw new HessianSerializerException(String.format("%1$s error while deserializing. Expected a HessianObject with '%2$d' fields but the object contains '%3$d' fields.", helpername, args.length, lObj.size()));
        int i = 0;
        try
        {
            final Iterator<HessianValue> lIter = lObj.iterator();
            while(lIter.hasNext())
            {
                final HessianValue lHesArg = lIter.next();

                // Deserialize the argument.
                final Object lArg = aEngine.deserialize(lHesArg, aPool);
                // Check the compatibility.
                if(lArg != null && !fieldTypes[i].isAssignableFrom(lArg.getClass()))
                {
                    throw new HessianSerializerException(String.format("%1$s error while deserializing. Noticed field type problem. Field index: '%2$d' with name: '%5$s' was expected to have type: '%3$s' but actually has type: '%4$s'.", helpername, i, fieldTypes[i].getName(), lArg.getClass().getName(), fieldNames[i]));
                }
                args[i] = lArg;
                i++;
            }
        }
        catch(HessianSerializerException e)
        {
            throw new HessianSerializerException(String.format("%1$s error while deserializing field %2$d named '%3$s' in an instance of class '%4$s.", helpername, i, fieldNames[i], helpedclass.getName()), e);
        }

        try
        {
            return fields2object(args);
        }
        catch (Exception e)
        {
            throw new HessianSerializerException(String.format("%1$s error while deserializing. The object fields did not represent a '%2$s'.", helpername, helpedclass.getName()), e);
        }
    }

    public HessianValue serialize(Object aJavaObject, HessianSerializer aEngine, Map<Object, HessianValue> aObjectPool, Map<Class, HessianClassdef> aClassdefPool)
    throws HessianSerializerException
    {
        if (!(helpedclass.isAssignableFrom(aJavaObject.getClass()))) throw new HessianSerializerException(String.format("%1$s error while serializing. Expected a '%2$s' object but received a '%3$s' object.", helpername, helpedclass.getName(), aJavaObject.getClass().getName()));
        final HessianObject lResult = new HessianObject(classdef);
        try
        {
            // Render the args.
            object2fields(aJavaObject, args);
            int i = 0;
            for(Object lArg: args)
            {
                try
                {
                    // Check the compatibility.
                    if (lArg != null && !fieldTypes[i].isAssignableFrom(lArg.getClass()))
                    {
                        throw new HessianSerializerException(String.format("%1$s error while serializing. Noticed field type problem. Field index: '%2$d' with name: '%5$s' was expected to have type: '%3$s' but actually has type: '%4$s'.", helpername, i, fieldTypes[i].getName(), lArg.getClass().getName(), fieldNames[i]));
                    }

                    final HessianValue lHesArg = aEngine.serialize(lArg, aObjectPool, aClassdefPool);
                    lResult.add(lHesArg);
                }
                catch (HessianSerializerException e)
                {
                    // Augment the exception with more info.
                    throw new HessianSerializerException(String.format("%1$s error while serializing field %2$d named '%3$s' in an instance of class '%4$s.", helpername, i, fieldNames[i], (lArg!=null)?lArg.getClass().getName():"null"), e);
                }

                i++;
            }
            // Remember this object.
            aObjectPool.put(aJavaObject, lResult);
        }
        catch(Exception e)
        {
            throw new HessianSerializerException(String.format("%1$s error while serializing. Could not generate an object representation out of an instance of: '%2$s'.", helpername, helpedclass.getName()), e);
        }
        return lResult;
    }

    public Class getHelpedClass()
    {
        return helpedclass;
    }

    protected abstract Object fields2object(Object ... aFields)
    throws Exception;

    protected abstract void object2fields(Object aValue, Object ... aFields)
    throws Exception;
}
